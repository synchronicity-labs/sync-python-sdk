# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..common.types.model import Model
from ..common.types.input import Input
from ..common.types.generation_options import GenerationOptions
from ..core.request_options import RequestOptions
from ..core.http_response import HttpResponse
from ..common.types.generation import Generation
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from ..common.errors.bad_request_error import BadRequestError
from ..common.types.generation_error import GenerationError
from ..common.errors.unauthorized_error import UnauthorizedError
from ..common.errors.internal_server_error import InternalServerError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .. import core
from ..common.types.generation_id import GenerationId
from ..core.jsonable_encoder import jsonable_encoder
from ..common.errors.not_found_error import NotFoundError
from ..common.types.generation_status import GenerationStatus
from ..common.types.estimated_generation_cost import EstimatedGenerationCost
from ..core.client_wrapper import AsyncClientWrapper
from ..core.http_response import AsyncHttpResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawGenerationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        model: Model,
        input: typing.Sequence[Input],
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        output_file_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Generation]:
        """
        Parameters
        ----------
        model : Model
            name of the model to use for generation.

        input : typing.Sequence[Input]
            Array of input objects. Must include one video input item and one audio input item. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.

        options : typing.Optional[GenerationOptions]
            additional options available for generation.

        webhook_url : typing.Optional[str]
            webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.

        output_file_name : typing.Optional[str]
            Base filename for the generated output without extension. The .mp4 extension will be added automatically.  Only alphanumeric characters, underscores, and hyphens are allowed, up to 255 characters.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Generation]
            Job created successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/generate",
            method="POST",
            json={
                "model": model,
                "input": convert_and_respect_annotation_metadata(
                    object_=input, annotation=typing.Sequence[Input], direction="write"
                ),
                "options": convert_and_respect_annotation_metadata(
                    object_=options, annotation=GenerationOptions, direction="write"
                ),
                "webhookUrl": webhook_url,
                "outputFileName": output_file_name,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Generation,
                    construct_type(
                        type_=Generation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_with_files(
        self,
        *,
        model: Model,
        video: typing.Optional[core.File] = OMIT,
        audio: typing.Optional[core.File] = OMIT,
        input: typing.Optional[typing.List[Input]] = OMIT,
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Generation]:
        """
        Parameters
        ----------
        model : Model

        video : typing.Optional[core.File]
            See core.File for more documentation

        audio : typing.Optional[core.File]
            See core.File for more documentation

        input : typing.Optional[typing.List[Input]]
            Array of input objects. Can be used to provide urls for larger files. Each input should either have a file or a url. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.

        options : typing.Optional[GenerationOptions]

        webhook_url : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Generation]
            Job created successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/generate",
            method="POST",
            data={
                "model": model,
                "input": input,
                "options": options,
                "webhookUrl": webhook_url,
            },
            files={
                **({"video": video} if video is not None else {}),
                **({"audio": audio} if audio is not None else {}),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Generation,
                    construct_type(
                        type_=Generation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, id: GenerationId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[Generation]:
        """
        Parameters
        ----------
        id : GenerationId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Generation]
            Job status retrieved successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/generate/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Generation,
                    construct_type(
                        type_=Generation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self,
        *,
        status: typing.Optional[GenerationStatus] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[Generation]]:
        """
        Parameters
        ----------
        status : typing.Optional[GenerationStatus]
            Filter generations by status

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[Generation]]
            Generations retrieved successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/generations",
            method="GET",
            params={
                "status": status,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Generation],
                    construct_type(
                        type_=typing.List[Generation],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def estimate_cost(
        self,
        *,
        model: Model,
        input: typing.Sequence[Input],
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        output_file_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[EstimatedGenerationCost]]:
        """
        Parameters
        ----------
        model : Model
            name of the model to use for generation.

        input : typing.Sequence[Input]
            Array of input objects. Must include one video input item and one audio input item. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.

        options : typing.Optional[GenerationOptions]
            additional options available for generation.

        webhook_url : typing.Optional[str]
            webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.

        output_file_name : typing.Optional[str]
            Base filename for the generated output without extension. The .mp4 extension will be added automatically.  Only alphanumeric characters, underscores, and hyphens are allowed, up to 255 characters.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[EstimatedGenerationCost]]
            Generations retrieved successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/analyze/cost",
            method="POST",
            json={
                "model": model,
                "input": convert_and_respect_annotation_metadata(
                    object_=input, annotation=typing.Sequence[Input], direction="write"
                ),
                "options": convert_and_respect_annotation_metadata(
                    object_=options, annotation=GenerationOptions, direction="write"
                ),
                "webhookUrl": webhook_url,
                "outputFileName": output_file_name,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[EstimatedGenerationCost],
                    construct_type(
                        type_=typing.List[EstimatedGenerationCost],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawGenerationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        model: Model,
        input: typing.Sequence[Input],
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        output_file_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Generation]:
        """
        Parameters
        ----------
        model : Model
            name of the model to use for generation.

        input : typing.Sequence[Input]
            Array of input objects. Must include one video input item and one audio input item. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.

        options : typing.Optional[GenerationOptions]
            additional options available for generation.

        webhook_url : typing.Optional[str]
            webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.

        output_file_name : typing.Optional[str]
            Base filename for the generated output without extension. The .mp4 extension will be added automatically.  Only alphanumeric characters, underscores, and hyphens are allowed, up to 255 characters.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Generation]
            Job created successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/generate",
            method="POST",
            json={
                "model": model,
                "input": convert_and_respect_annotation_metadata(
                    object_=input, annotation=typing.Sequence[Input], direction="write"
                ),
                "options": convert_and_respect_annotation_metadata(
                    object_=options, annotation=GenerationOptions, direction="write"
                ),
                "webhookUrl": webhook_url,
                "outputFileName": output_file_name,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Generation,
                    construct_type(
                        type_=Generation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_with_files(
        self,
        *,
        model: Model,
        video: typing.Optional[core.File] = OMIT,
        audio: typing.Optional[core.File] = OMIT,
        input: typing.Optional[typing.List[Input]] = OMIT,
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Generation]:
        """
        Parameters
        ----------
        model : Model

        video : typing.Optional[core.File]
            See core.File for more documentation

        audio : typing.Optional[core.File]
            See core.File for more documentation

        input : typing.Optional[typing.List[Input]]
            Array of input objects. Can be used to provide urls for larger files. Each input should either have a file or a url. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.

        options : typing.Optional[GenerationOptions]

        webhook_url : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Generation]
            Job created successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/generate",
            method="POST",
            data={
                "model": model,
                "input": input,
                "options": options,
                "webhookUrl": webhook_url,
            },
            files={
                **({"video": video} if video is not None else {}),
                **({"audio": audio} if audio is not None else {}),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Generation,
                    construct_type(
                        type_=Generation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, id: GenerationId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[Generation]:
        """
        Parameters
        ----------
        id : GenerationId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Generation]
            Job status retrieved successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/generate/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Generation,
                    construct_type(
                        type_=Generation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self,
        *,
        status: typing.Optional[GenerationStatus] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[Generation]]:
        """
        Parameters
        ----------
        status : typing.Optional[GenerationStatus]
            Filter generations by status

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[Generation]]
            Generations retrieved successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/generations",
            method="GET",
            params={
                "status": status,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Generation],
                    construct_type(
                        type_=typing.List[Generation],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def estimate_cost(
        self,
        *,
        model: Model,
        input: typing.Sequence[Input],
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        output_file_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[EstimatedGenerationCost]]:
        """
        Parameters
        ----------
        model : Model
            name of the model to use for generation.

        input : typing.Sequence[Input]
            Array of input objects. Must include one video input item and one audio input item. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.

        options : typing.Optional[GenerationOptions]
            additional options available for generation.

        webhook_url : typing.Optional[str]
            webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.

        output_file_name : typing.Optional[str]
            Base filename for the generated output without extension. The .mp4 extension will be added automatically.  Only alphanumeric characters, underscores, and hyphens are allowed, up to 255 characters.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[EstimatedGenerationCost]]
            Generations retrieved successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/analyze/cost",
            method="POST",
            json={
                "model": model,
                "input": convert_and_respect_annotation_metadata(
                    object_=input, annotation=typing.Sequence[Input], direction="write"
                ),
                "options": convert_and_respect_annotation_metadata(
                    object_=options, annotation=GenerationOptions, direction="write"
                ),
                "webhookUrl": webhook_url,
                "outputFileName": output_file_name,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[EstimatedGenerationCost],
                    construct_type(
                        type_=typing.List[EstimatedGenerationCost],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
