# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import datetime as dt
from ...core.serialization import FieldMetadata
import pydantic
import typing
from .generation_id import GenerationId
from .input import Input
from .model import Model
from .generation_options import GenerationOptions
from .generation_status import GenerationStatus
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class Generation(UniversalBaseModel):
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    The date and time the generation was created.
    """

    error: typing.Optional[str] = pydantic.Field(default=None)
    """
    The error message if the generation failed.
    """

    id: GenerationId
    input: typing.List[Input] = pydantic.Field()
    """
    An array of input objects used for generation.
    """

    model: Model = pydantic.Field()
    """
    The name of the model used for generation.
    """

    options: typing.Optional[GenerationOptions] = pydantic.Field(default=None)
    """
    Options for the generation.
    """

    output_duration: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="outputDuration")] = (
        pydantic.Field(default=None)
    )
    """
    The duration of the output media.
    """

    output_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="outputUrl")] = pydantic.Field(
        default=None
    )
    """
    The URL of the output media.
    """

    status: GenerationStatus = pydantic.Field()
    """
    The status of the generation.
    """

    webhook_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="webhookUrl")] = pydantic.Field(
        default=None
    )
    """
    The URL to the webhook endpoint.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
