# This file was auto-generated by Fern from our API Definition.

from ...core.unchecked_base_model import UncheckedBaseModel
import typing_extensions
from ...core.serialization import FieldMetadata
import pydantic
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class SegmentAudioInput(UncheckedBaseModel):
    """
    Audio input configuration for a specific segment. References an audio input by refId and optionally crops the audio to a specific time range.
    """

    ref_id: typing_extensions.Annotated[str, FieldMetadata(alias="refId")] = pydantic.Field()
    """
    Reference ID of the audio/text-to-speech input to use for this segment
    """

    start_time: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="startTime")] = pydantic.Field(
        default=None
    )
    """
    Optional start time (in seconds) to crop the referenced audio. When specified, end_time must also be provided.
    """

    end_time: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="endTime")] = pydantic.Field(
        default=None
    )
    """
    Optional end time (in seconds) to crop the referenced audio. When specified, start_time must also be provided.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
