# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .segment_secs import SegmentSecs
from .segment_frames import SegmentFrames
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .tts_provider_config import TtsProviderConfig


class Input_Video(UniversalBaseModel):
    """
    An input item for a generation.
    """

    type: typing.Literal["video"] = "video"
    url: str
    segments_secs: typing.Optional[SegmentSecs] = None
    segments_frames: typing.Optional[SegmentFrames] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Input_Audio(UniversalBaseModel):
    """
    An input item for a generation.
    """

    type: typing.Literal["audio"] = "audio"
    url: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Input_Text(UniversalBaseModel):
    """
    An input item for a generation.
    """

    type: typing.Literal["text"] = "text"
    provider: TtsProviderConfig

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


Input = typing.Union[Input_Video, Input_Audio, Input_Text]
