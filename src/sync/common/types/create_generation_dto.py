# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .model import Model
import pydantic
import typing
from .input import Input
from .generation_options import GenerationOptions
import typing_extensions
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class CreateGenerationDto(UniversalBaseModel):
    model: Model = pydantic.Field()
    """
    name of the model to use for generation.
    """

    input: typing.List[Input] = pydantic.Field()
    """
    Array of input objects. Must include one video input item and one audio input item. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.
    """

    options: typing.Optional[GenerationOptions] = pydantic.Field(default=None)
    """
    additional options available for generation.
    """

    webhook_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="webhookUrl")] = pydantic.Field(
        default=None
    )
    """
    webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
