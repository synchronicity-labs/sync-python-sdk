# This file was auto-generated by Fern from our API Definition.

from ...core.unchecked_base_model import UncheckedBaseModel
from .batch_id import BatchId
import datetime as dt
import pydantic
from .batch_status import BatchStatus
from .batch_metrics import BatchMetrics
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class BatchResponse(UncheckedBaseModel):
    id: BatchId
    created_at: dt.datetime = pydantic.Field()
    """
    The date and time the batch was created.
    """

    status: BatchStatus = pydantic.Field()
    """
    The current status of the batch.
    """

    metrics: BatchMetrics = pydantic.Field()
    """
    Metrics about the batch processing progress.
    """

    webhook_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="webhookUrl")] = pydantic.Field(
        default=None
    )
    """
    The webhook URL for batch status notifications.
    """

    output_url: typing_extensions.Annotated[str, FieldMetadata(alias="outputUrl")] = pydantic.Field()
    """
    The URL to download the batch results file (available when completed).
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
