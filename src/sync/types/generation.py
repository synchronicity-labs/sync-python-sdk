# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing_extensions
import datetime as dt
from ..core.serialization import FieldMetadata
from .generation_status import GenerationStatus
import typing
from .generation_input_item import GenerationInputItem
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Generation(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    A unique identifier for the generation.
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    The date and time the generation was created.
    """

    status: GenerationStatus = pydantic.Field()
    """
    The status of the generation.
    """

    model: str = pydantic.Field()
    """
    The name of the model used for generation.
    """

    input: typing.List[GenerationInputItem] = pydantic.Field()
    """
    An array of input objects containing type and URL.
    """

    webhook_url: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]], FieldMetadata(alias="webhookUrl")
    ] = pydantic.Field(default=None)
    """
    The URL to the webhook endpoint.
    """

    options: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Options for the generation.
    """

    output_url: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]], FieldMetadata(alias="outputUrl")
    ] = pydantic.Field(default=None)
    """
    The URL of the output media.
    """

    output_duration: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]], FieldMetadata(alias="outputDuration")
    ] = pydantic.Field(default=None)
    """
    The duration of the output media.
    """

    error: typing.Optional[str] = pydantic.Field(default=None)
    """
    The error message if the generation failed.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
