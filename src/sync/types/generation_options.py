# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .generation_options_output_format import GenerationOptionsOutputFormat
from .generation_options_sync_mode import GenerationOptionsSyncMode
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class GenerationOptions(UniversalBaseModel):
    pads: typing.Optional[typing.List[float]] = pydantic.Field(default=None)
    """
    Padding values
    """

    speedup: typing.Optional[float] = pydantic.Field(default=None)
    """
    downscale inputs for faster generations. used to preview changes.
    """

    temperature: typing.Optional[float] = pydantic.Field(default=None)
    """
    generation temperature randomness between 0 and 1. note: only works for lipsync-2 based models.
    """

    output_format: typing.Optional[GenerationOptionsOutputFormat] = pydantic.Field(default=None)
    """
    format of the output media that is generated.
    """

    sync_mode: typing.Optional[GenerationOptionsSyncMode] = pydantic.Field(default=None)
    """
    lipsync mode when audio and video durations are out of sync.
    """

    fps: typing.Optional[float] = pydantic.Field(default=None)
    """
    Frames per second (FPS) for the output video
    """

    output_resolution: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Resolution of the output video [width, height]
    """

    active_speaker: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to detect active speaker and apply generation to them
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
