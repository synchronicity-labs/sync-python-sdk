# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.create_generation_dto_model import CreateGenerationDtoModel
from ..types.create_generation_dto_input_item import CreateGenerationDtoInputItem
from ..types.generation_options import GenerationOptions
from ..core.request_options import RequestOptions
from ..types.estimated_generation_cost import EstimatedGenerationCost
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unauthorized_error import UnauthorizedError
from ..types.generation_error import GenerationError
from ..errors.internal_server_error import InternalServerError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AnalyzeClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def analyze_controller_get_cost_estimate(
        self,
        *,
        model: CreateGenerationDtoModel,
        input: typing.Sequence[CreateGenerationDtoInputItem],
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[EstimatedGenerationCost]:
        """
        Parameters
        ----------
        model : CreateGenerationDtoModel
            name of the model to use for generation.

        input : typing.Sequence[CreateGenerationDtoInputItem]
            Array of input objects. Must include one video input and either an audio or text input.

        options : typing.Optional[GenerationOptions]
            additional options available for generation.

        webhook_url : typing.Optional[str]
            webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EstimatedGenerationCost]
            Generations retrieved successfully

        Examples
        --------
        from sync import (
            CreateGenerationDtoInputItem_Audio,
            CreateGenerationDtoInputItem_Video,
            Sync,
        )

        client = Sync(
            api_key="YOUR_API_KEY",
        )
        client.analyze.analyze_controller_get_cost_estimate(
            model="lipsync-2",
            input=[
                CreateGenerationDtoInputItem_Video(
                    url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortvid-03a10044-7741-4cfc-816a-5bccd392d1ee.mp4",
                ),
                CreateGenerationDtoInputItem_Audio(
                    url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortaud-27623a4f-edab-4c6a-8383-871b18961a4a.wav",
                ),
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/analyze/cost",
            method="POST",
            json={
                "model": model,
                "input": convert_and_respect_annotation_metadata(
                    object_=input, annotation=typing.Sequence[CreateGenerationDtoInputItem], direction="write"
                ),
                "options": convert_and_respect_annotation_metadata(
                    object_=options, annotation=GenerationOptions, direction="write"
                ),
                "webhookUrl": webhook_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[EstimatedGenerationCost],
                    parse_obj_as(
                        type_=typing.List[EstimatedGenerationCost],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAnalyzeClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def analyze_controller_get_cost_estimate(
        self,
        *,
        model: CreateGenerationDtoModel,
        input: typing.Sequence[CreateGenerationDtoInputItem],
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[EstimatedGenerationCost]:
        """
        Parameters
        ----------
        model : CreateGenerationDtoModel
            name of the model to use for generation.

        input : typing.Sequence[CreateGenerationDtoInputItem]
            Array of input objects. Must include one video input and either an audio or text input.

        options : typing.Optional[GenerationOptions]
            additional options available for generation.

        webhook_url : typing.Optional[str]
            webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EstimatedGenerationCost]
            Generations retrieved successfully

        Examples
        --------
        import asyncio

        from sync import (
            AsyncSync,
            CreateGenerationDtoInputItem_Audio,
            CreateGenerationDtoInputItem_Video,
        )

        client = AsyncSync(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.analyze.analyze_controller_get_cost_estimate(
                model="lipsync-2",
                input=[
                    CreateGenerationDtoInputItem_Video(
                        url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortvid-03a10044-7741-4cfc-816a-5bccd392d1ee.mp4",
                    ),
                    CreateGenerationDtoInputItem_Audio(
                        url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortaud-27623a4f-edab-4c6a-8383-871b18961a4a.wav",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/analyze/cost",
            method="POST",
            json={
                "model": model,
                "input": convert_and_respect_annotation_metadata(
                    object_=input, annotation=typing.Sequence[CreateGenerationDtoInputItem], direction="write"
                ),
                "options": convert_and_respect_annotation_metadata(
                    object_=options, annotation=GenerationOptions, direction="write"
                ),
                "webhookUrl": webhook_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[EstimatedGenerationCost],
                    parse_obj_as(
                        type_=typing.List[EstimatedGenerationCost],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
