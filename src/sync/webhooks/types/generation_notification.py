# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .webhook_status import WebhookStatus
import pydantic
import typing_extensions
import datetime as dt
from ...core.serialization import FieldMetadata
from ...common.types.generation_id import GenerationId
import typing
from ...common.types.input import Input
from ...common.types.model import Model
from ...common.types.generation_options import GenerationOptions
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class GenerationNotification(UniversalBaseModel):
    status: WebhookStatus = pydantic.Field()
    """
    The status of the generation
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    The date and time the generation was created
    """

    id: GenerationId
    input: typing.List[Input] = pydantic.Field()
    """
    The input items for the generation
    """

    model: Model
    error: typing.Optional[str] = pydantic.Field(default=None)
    """
    error message if the generation failed
    """

    options: typing.Optional[GenerationOptions] = pydantic.Field(default=None)
    """
    options used for the generation
    """

    output_duration: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="outputDuration")] = (
        pydantic.Field(default=None)
    )
    """
    generated output media duration in seconds
    """

    output_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="outputUrl")] = pydantic.Field(
        default=None
    )
    """
    url of the generated output media
    """

    webhook_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="webhookUrl")] = pydantic.Field(
        default=None
    )
    """
    url of the webhook server
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
