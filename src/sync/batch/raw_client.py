# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .. import core
from ..core.request_options import RequestOptions
from ..core.http_response import HttpResponse
from ..common.types.create_batch_response import CreateBatchResponse
from ..core.unchecked_base_model import construct_type
from ..common.errors.bad_request_error import BadRequestError
from ..common.types.generation_error import GenerationError
from ..common.errors.unauthorized_error import UnauthorizedError
from ..common.errors.payment_required_error import PaymentRequiredError
from ..common.errors.too_many_requests_error import TooManyRequestsError
from ..common.errors.internal_server_error import InternalServerError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..common.types.batch_id import BatchId
from ..common.types.batch_response import BatchResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..common.errors.not_found_error import NotFoundError
from ..common.types.batch_status import BatchStatus
import datetime as dt
from ..core.datetime_utils import serialize_datetime
from ..core.client_wrapper import AsyncClientWrapper
from ..core.http_response import AsyncHttpResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawBatchClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        input: core.File,
        webhook_url: typing.Optional[str] = OMIT,
        dry_run: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[CreateBatchResponse]:
        """
        API for [Batch Processing](/api-reference/guides/batch-processing). Available only for `Scale` and `Enterprise` plans.

        Parameters
        ----------
        input : core.File
            See core.File for more documentation

        webhook_url : typing.Optional[str]
            Optional webhook URL to receive batch completion notifications. A POST request will be sent when the batch completes or fails.

        dry_run : typing.Optional[bool]
            When true, validates the input file without processing. Returns validation status without creating generations.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[CreateBatchResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/batch",
            method="POST",
            data={
                "webhook_url": webhook_url,
                "dry_run": dry_run,
            },
            files={
                "input": input,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateBatchResponse,
                    construct_type(
                        type_=CreateBatchResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, id: BatchId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[BatchResponse]:
        """
        Retrieve details about a specific batch, including its current status, processing metrics, and output file URL when available.

        Parameters
        ----------
        id : BatchId
            The unique identifier of the batch

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BatchResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/batch/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BatchResponse,
                    construct_type(
                        type_=BatchResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self,
        *,
        status: typing.Optional[BatchStatus] = None,
        created_after: typing.Optional[dt.datetime] = None,
        created_before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[BatchResponse]]:
        """
        List all batches for your organization with optional filtering by status and creation date. Results are ordered by creation date (newest first).

        Parameters
        ----------
        status : typing.Optional[BatchStatus]
            Filter batches by status

        created_after : typing.Optional[dt.datetime]
            Filter batches created after this datetime (ISO 8601 format)

        created_before : typing.Optional[dt.datetime]
            Filter batches created before this datetime (ISO 8601 format)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[BatchResponse]]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/batch",
            method="GET",
            params={
                "status": status,
                "created_after": serialize_datetime(created_after) if created_after is not None else None,
                "created_before": serialize_datetime(created_before) if created_before is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[BatchResponse],
                    construct_type(
                        type_=typing.List[BatchResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawBatchClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        input: core.File,
        webhook_url: typing.Optional[str] = OMIT,
        dry_run: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[CreateBatchResponse]:
        """
        API for [Batch Processing](/api-reference/guides/batch-processing). Available only for `Scale` and `Enterprise` plans.

        Parameters
        ----------
        input : core.File
            See core.File for more documentation

        webhook_url : typing.Optional[str]
            Optional webhook URL to receive batch completion notifications. A POST request will be sent when the batch completes or fails.

        dry_run : typing.Optional[bool]
            When true, validates the input file without processing. Returns validation status without creating generations.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[CreateBatchResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/batch",
            method="POST",
            data={
                "webhook_url": webhook_url,
                "dry_run": dry_run,
            },
            files={
                "input": input,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CreateBatchResponse,
                    construct_type(
                        type_=CreateBatchResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, id: BatchId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[BatchResponse]:
        """
        Retrieve details about a specific batch, including its current status, processing metrics, and output file URL when available.

        Parameters
        ----------
        id : BatchId
            The unique identifier of the batch

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BatchResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/batch/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BatchResponse,
                    construct_type(
                        type_=BatchResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self,
        *,
        status: typing.Optional[BatchStatus] = None,
        created_after: typing.Optional[dt.datetime] = None,
        created_before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[BatchResponse]]:
        """
        List all batches for your organization with optional filtering by status and creation date. Results are ordered by creation date (newest first).

        Parameters
        ----------
        status : typing.Optional[BatchStatus]
            Filter batches by status

        created_after : typing.Optional[dt.datetime]
            Filter batches created after this datetime (ISO 8601 format)

        created_before : typing.Optional[dt.datetime]
            Filter batches created before this datetime (ISO 8601 format)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[BatchResponse]]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/batch",
            method="GET",
            params={
                "status": status,
                "created_after": serialize_datetime(created_after) if created_after is not None else None,
                "created_before": serialize_datetime(created_before) if created_before is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[BatchResponse],
                    construct_type(
                        type_=typing.List[BatchResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        construct_type(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
