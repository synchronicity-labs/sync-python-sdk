# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawBatchClient
from .. import core
from ..core.request_options import RequestOptions
from ..common.types.create_batch_response import CreateBatchResponse
from ..common.types.batch_id import BatchId
from ..common.types.batch_response import BatchResponse
from ..common.types.batch_status import BatchStatus
import datetime as dt
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawBatchClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BatchClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBatchClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBatchClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBatchClient
        """
        return self._raw_client

    def create(
        self,
        *,
        input: core.File,
        webhook_url: typing.Optional[str] = OMIT,
        dry_run: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateBatchResponse:
        """
        API for [Batch Processing](/api-reference/guides/batch-processing). Available only for `Scale` and `Enterprise` plans.

        Parameters
        ----------
        input : core.File
            See core.File for more documentation

        webhook_url : typing.Optional[str]
            Optional webhook URL to receive batch completion notifications. A POST request will be sent when the batch completes or fails.

        dry_run : typing.Optional[bool]
            When true, validates the input file without processing. Returns validation status without creating generations.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateBatchResponse

        Examples
        --------
        from sync import Sync

        client = Sync(
            api_key="YOUR_API_KEY",
        )
        client.batch.create(
            webhook_url="https://your-webhook-url.com/batch-webhook",
            dry_run=False,
        )
        """
        response = self._raw_client.create(
            input=input, webhook_url=webhook_url, dry_run=dry_run, request_options=request_options
        )
        return response.data

    def get(self, id: BatchId, *, request_options: typing.Optional[RequestOptions] = None) -> BatchResponse:
        """
        Retrieve details about a specific batch, including its current status, processing metrics, and output file URL when available.

        Parameters
        ----------
        id : BatchId
            The unique identifier of the batch

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponse

        Examples
        --------
        from sync import Sync

        client = Sync(
            api_key="YOUR_API_KEY",
        )
        client.batch.get(
            id="batch_abc123",
        )
        """
        response = self._raw_client.get(id, request_options=request_options)
        return response.data

    def list(
        self,
        *,
        status: typing.Optional[BatchStatus] = None,
        created_after: typing.Optional[dt.datetime] = None,
        created_before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[BatchResponse]:
        """
        List all batches for your organization with optional filtering by status and creation date. Results are ordered by creation date (newest first).

        Parameters
        ----------
        status : typing.Optional[BatchStatus]
            Filter batches by status

        created_after : typing.Optional[dt.datetime]
            Filter batches created after this datetime (ISO 8601 format)

        created_before : typing.Optional[dt.datetime]
            Filter batches created before this datetime (ISO 8601 format)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BatchResponse]

        Examples
        --------
        from sync import Sync

        client = Sync(
            api_key="YOUR_API_KEY",
        )
        client.batch.list()
        """
        response = self._raw_client.list(
            status=status, created_after=created_after, created_before=created_before, request_options=request_options
        )
        return response.data


class AsyncBatchClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBatchClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBatchClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBatchClient
        """
        return self._raw_client

    async def create(
        self,
        *,
        input: core.File,
        webhook_url: typing.Optional[str] = OMIT,
        dry_run: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateBatchResponse:
        """
        API for [Batch Processing](/api-reference/guides/batch-processing). Available only for `Scale` and `Enterprise` plans.

        Parameters
        ----------
        input : core.File
            See core.File for more documentation

        webhook_url : typing.Optional[str]
            Optional webhook URL to receive batch completion notifications. A POST request will be sent when the batch completes or fails.

        dry_run : typing.Optional[bool]
            When true, validates the input file without processing. Returns validation status without creating generations.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateBatchResponse

        Examples
        --------
        import asyncio

        from sync import AsyncSync

        client = AsyncSync(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.batch.create(
                webhook_url="https://your-webhook-url.com/batch-webhook",
                dry_run=False,
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create(
            input=input, webhook_url=webhook_url, dry_run=dry_run, request_options=request_options
        )
        return response.data

    async def get(self, id: BatchId, *, request_options: typing.Optional[RequestOptions] = None) -> BatchResponse:
        """
        Retrieve details about a specific batch, including its current status, processing metrics, and output file URL when available.

        Parameters
        ----------
        id : BatchId
            The unique identifier of the batch

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponse

        Examples
        --------
        import asyncio

        from sync import AsyncSync

        client = AsyncSync(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.batch.get(
                id="batch_abc123",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get(id, request_options=request_options)
        return response.data

    async def list(
        self,
        *,
        status: typing.Optional[BatchStatus] = None,
        created_after: typing.Optional[dt.datetime] = None,
        created_before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[BatchResponse]:
        """
        List all batches for your organization with optional filtering by status and creation date. Results are ordered by creation date (newest first).

        Parameters
        ----------
        status : typing.Optional[BatchStatus]
            Filter batches by status

        created_after : typing.Optional[dt.datetime]
            Filter batches created after this datetime (ISO 8601 format)

        created_before : typing.Optional[dt.datetime]
            Filter batches created before this datetime (ISO 8601 format)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BatchResponse]

        Examples
        --------
        import asyncio

        from sync import AsyncSync

        client = AsyncSync(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.batch.list()


        asyncio.run(main())
        """
        response = await self._raw_client.list(
            status=status, created_after=created_after, created_before=created_before, request_options=request_options
        )
        return response.data
