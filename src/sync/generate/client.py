# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawGenerateClient
from ..common.types.model import Model
from ..common.types.input import Input
from ..common.types.generation_options import GenerationOptions
from ..core.request_options import RequestOptions
from ..common.types.generation import Generation
from ..common.types.generation_id import GenerationId
from ..common.types.generation_status import GenerationStatus
from ..common.types.estimated_generation_cost import EstimatedGenerationCost
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawGenerateClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class GenerateClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawGenerateClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawGenerateClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawGenerateClient
        """
        return self._raw_client

    def create_generation(
        self,
        *,
        model: Model,
        input: typing.Sequence[Input],
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Generation:
        """
        Parameters
        ----------
        model : Model
            name of the model to use for generation.

        input : typing.Sequence[Input]
            Array of input objects. Must include one video input item and one audio input item. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.

        options : typing.Optional[GenerationOptions]
            additional options available for generation.

        webhook_url : typing.Optional[str]
            webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Generation
            Job created successfully

        Examples
        --------
        from sync import Sync
        from sync.common import Audio, GenerationOptions, Video

        client = Sync(
            api_key="YOUR_API_KEY",
        )
        client.generate.create_generation(
            input=[
                Video(
                    url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortvid-03a10044-7741-4cfc-816a-5bccd392d1ee.mp4",
                ),
                Audio(
                    url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortaud-27623a4f-edab-4c6a-8383-871b18961a4a.wav",
                ),
            ],
            model="lipsync-2",
            options=GenerationOptions(
                sync_mode="loop",
            ),
        )
        """
        response = self._raw_client.create_generation(
            model=model, input=input, options=options, webhook_url=webhook_url, request_options=request_options
        )
        return response.data

    def get_generation(
        self, id: GenerationId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Generation:
        """
        Parameters
        ----------
        id : GenerationId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Generation
            Job status retrieved successfully

        Examples
        --------
        from sync import Sync

        client = Sync(
            api_key="YOUR_API_KEY",
        )
        client.generate.get_generation(
            id="6533643b-acbe-4c40-967e-d9ba9baac39e",
        )
        """
        response = self._raw_client.get_generation(id, request_options=request_options)
        return response.data

    def list_generations(
        self,
        *,
        status: typing.Optional[GenerationStatus] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Generation]:
        """
        Parameters
        ----------
        status : typing.Optional[GenerationStatus]
            Filter generations by status

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Generation]
            Generations retrieved successfully

        Examples
        --------
        from sync import Sync

        client = Sync(
            api_key="YOUR_API_KEY",
        )
        client.generate.list_generations()
        """
        response = self._raw_client.list_generations(status=status, request_options=request_options)
        return response.data

    def estimate_cost(
        self,
        *,
        model: Model,
        input: typing.Sequence[Input],
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[EstimatedGenerationCost]:
        """
        Parameters
        ----------
        model : Model
            name of the model to use for generation.

        input : typing.Sequence[Input]
            Array of input objects. Must include one video input item and one audio input item. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.

        options : typing.Optional[GenerationOptions]
            additional options available for generation.

        webhook_url : typing.Optional[str]
            webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EstimatedGenerationCost]
            Generations retrieved successfully

        Examples
        --------
        from sync import Sync
        from sync.common import Audio, GenerationOptions, Video

        client = Sync(
            api_key="YOUR_API_KEY",
        )
        client.generate.estimate_cost(
            input=[
                Video(
                    url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortvid-03a10044-7741-4cfc-816a-5bccd392d1ee.mp4",
                ),
                Audio(
                    url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortaud-27623a4f-edab-4c6a-8383-871b18961a4a.wav",
                ),
            ],
            model="lipsync-2",
            options=GenerationOptions(
                sync_mode="loop",
            ),
        )
        """
        response = self._raw_client.estimate_cost(
            model=model, input=input, options=options, webhook_url=webhook_url, request_options=request_options
        )
        return response.data


class AsyncGenerateClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawGenerateClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawGenerateClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawGenerateClient
        """
        return self._raw_client

    async def create_generation(
        self,
        *,
        model: Model,
        input: typing.Sequence[Input],
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Generation:
        """
        Parameters
        ----------
        model : Model
            name of the model to use for generation.

        input : typing.Sequence[Input]
            Array of input objects. Must include one video input item and one audio input item. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.

        options : typing.Optional[GenerationOptions]
            additional options available for generation.

        webhook_url : typing.Optional[str]
            webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Generation
            Job created successfully

        Examples
        --------
        import asyncio

        from sync import AsyncSync
        from sync.common import Audio, GenerationOptions, Video

        client = AsyncSync(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.generate.create_generation(
                input=[
                    Video(
                        url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortvid-03a10044-7741-4cfc-816a-5bccd392d1ee.mp4",
                    ),
                    Audio(
                        url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortaud-27623a4f-edab-4c6a-8383-871b18961a4a.wav",
                    ),
                ],
                model="lipsync-2",
                options=GenerationOptions(
                    sync_mode="loop",
                ),
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create_generation(
            model=model, input=input, options=options, webhook_url=webhook_url, request_options=request_options
        )
        return response.data

    async def get_generation(
        self, id: GenerationId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Generation:
        """
        Parameters
        ----------
        id : GenerationId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Generation
            Job status retrieved successfully

        Examples
        --------
        import asyncio

        from sync import AsyncSync

        client = AsyncSync(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.generate.get_generation(
                id="6533643b-acbe-4c40-967e-d9ba9baac39e",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_generation(id, request_options=request_options)
        return response.data

    async def list_generations(
        self,
        *,
        status: typing.Optional[GenerationStatus] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Generation]:
        """
        Parameters
        ----------
        status : typing.Optional[GenerationStatus]
            Filter generations by status

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Generation]
            Generations retrieved successfully

        Examples
        --------
        import asyncio

        from sync import AsyncSync

        client = AsyncSync(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.generate.list_generations()


        asyncio.run(main())
        """
        response = await self._raw_client.list_generations(status=status, request_options=request_options)
        return response.data

    async def estimate_cost(
        self,
        *,
        model: Model,
        input: typing.Sequence[Input],
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[EstimatedGenerationCost]:
        """
        Parameters
        ----------
        model : Model
            name of the model to use for generation.

        input : typing.Sequence[Input]
            Array of input objects. Must include one video input item and one audio input item. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.

        options : typing.Optional[GenerationOptions]
            additional options available for generation.

        webhook_url : typing.Optional[str]
            webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EstimatedGenerationCost]
            Generations retrieved successfully

        Examples
        --------
        import asyncio

        from sync import AsyncSync
        from sync.common import Audio, GenerationOptions, Video

        client = AsyncSync(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.generate.estimate_cost(
                input=[
                    Video(
                        url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortvid-03a10044-7741-4cfc-816a-5bccd392d1ee.mp4",
                    ),
                    Audio(
                        url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortaud-27623a4f-edab-4c6a-8383-871b18961a4a.wav",
                    ),
                ],
                model="lipsync-2",
                options=GenerationOptions(
                    sync_mode="loop",
                ),
            )


        asyncio.run(main())
        """
        response = await self._raw_client.estimate_cost(
            model=model, input=input, options=options, webhook_url=webhook_url, request_options=request_options
        )
        return response.data
