# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..common.types.model import Model
from ..common.types.input import Input
from ..common.types.generation_options import GenerationOptions
from ..core.request_options import RequestOptions
from ..common.types.generation import Generation
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..common.errors.bad_request_error import BadRequestError
from ..common.types.generation_error import GenerationError
from ..common.errors.unauthorized_error import UnauthorizedError
from ..common.errors.internal_server_error import InternalServerError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..common.types.generation_id import GenerationId
from ..core.jsonable_encoder import jsonable_encoder
from ..common.errors.not_found_error import NotFoundError
from ..common.types.generation_status import GenerationStatus
from ..common.types.estimated_generation_cost import EstimatedGenerationCost
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class GenerateClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_generation(
        self,
        *,
        model: Model,
        input: typing.Sequence[Input],
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Generation:
        """
        Parameters
        ----------
        model : Model
            name of the model to use for generation.

        input : typing.Sequence[Input]
            Array of input objects. Must include one video input item and one audio input item. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.

        options : typing.Optional[GenerationOptions]
            additional options available for generation.

        webhook_url : typing.Optional[str]
            webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Generation
            Job created successfully

        Examples
        --------
        from sync import Sync
        from sync.common import Audio, GenerationOptions, Video

        client = Sync(
            api_key="YOUR_API_KEY",
        )
        client.generate.create_generation(
            input=[
                Video(
                    url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortvid-03a10044-7741-4cfc-816a-5bccd392d1ee.mp4",
                ),
                Audio(
                    url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortaud-27623a4f-edab-4c6a-8383-871b18961a4a.wav",
                ),
            ],
            model="lipsync-2",
            options=GenerationOptions(
                sync_mode="loop",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/generate",
            method="POST",
            json={
                "model": model,
                "input": convert_and_respect_annotation_metadata(
                    object_=input, annotation=typing.Sequence[Input], direction="write"
                ),
                "options": convert_and_respect_annotation_metadata(
                    object_=options, annotation=GenerationOptions, direction="write"
                ),
                "webhookUrl": webhook_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Generation,
                    parse_obj_as(
                        type_=Generation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_generation(
        self, id: GenerationId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Generation:
        """
        Parameters
        ----------
        id : GenerationId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Generation
            Job status retrieved successfully

        Examples
        --------
        from sync import Sync

        client = Sync(
            api_key="YOUR_API_KEY",
        )
        client.generate.get_generation(
            id="6533643b-acbe-4c40-967e-d9ba9baac39e",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/generate/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Generation,
                    parse_obj_as(
                        type_=Generation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_generations(
        self,
        *,
        status: typing.Optional[GenerationStatus] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Generation]:
        """
        Parameters
        ----------
        status : typing.Optional[GenerationStatus]
            Filter generations by status

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Generation]
            Generations retrieved successfully

        Examples
        --------
        from sync import Sync

        client = Sync(
            api_key="YOUR_API_KEY",
        )
        client.generate.list_generations()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/generations",
            method="GET",
            params={
                "status": status,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Generation],
                    parse_obj_as(
                        type_=typing.List[Generation],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def estimate_cost(
        self,
        *,
        model: Model,
        input: typing.Sequence[Input],
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[EstimatedGenerationCost]:
        """
        Parameters
        ----------
        model : Model
            name of the model to use for generation.

        input : typing.Sequence[Input]
            Array of input objects. Must include one video input item and one audio input item. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.

        options : typing.Optional[GenerationOptions]
            additional options available for generation.

        webhook_url : typing.Optional[str]
            webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EstimatedGenerationCost]
            Generations retrieved successfully

        Examples
        --------
        from sync import Sync
        from sync.common import Audio, GenerationOptions, Video

        client = Sync(
            api_key="YOUR_API_KEY",
        )
        client.generate.estimate_cost(
            input=[
                Video(
                    url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortvid-03a10044-7741-4cfc-816a-5bccd392d1ee.mp4",
                ),
                Audio(
                    url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortaud-27623a4f-edab-4c6a-8383-871b18961a4a.wav",
                ),
            ],
            model="lipsync-2",
            options=GenerationOptions(
                sync_mode="loop",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/analyze/cost",
            method="POST",
            json={
                "model": model,
                "input": convert_and_respect_annotation_metadata(
                    object_=input, annotation=typing.Sequence[Input], direction="write"
                ),
                "options": convert_and_respect_annotation_metadata(
                    object_=options, annotation=GenerationOptions, direction="write"
                ),
                "webhookUrl": webhook_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[EstimatedGenerationCost],
                    parse_obj_as(
                        type_=typing.List[EstimatedGenerationCost],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncGenerateClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_generation(
        self,
        *,
        model: Model,
        input: typing.Sequence[Input],
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Generation:
        """
        Parameters
        ----------
        model : Model
            name of the model to use for generation.

        input : typing.Sequence[Input]
            Array of input objects. Must include one video input item and one audio input item. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.

        options : typing.Optional[GenerationOptions]
            additional options available for generation.

        webhook_url : typing.Optional[str]
            webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Generation
            Job created successfully

        Examples
        --------
        import asyncio

        from sync import AsyncSync
        from sync.common import Audio, GenerationOptions, Video

        client = AsyncSync(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.generate.create_generation(
                input=[
                    Video(
                        url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortvid-03a10044-7741-4cfc-816a-5bccd392d1ee.mp4",
                    ),
                    Audio(
                        url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortaud-27623a4f-edab-4c6a-8383-871b18961a4a.wav",
                    ),
                ],
                model="lipsync-2",
                options=GenerationOptions(
                    sync_mode="loop",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/generate",
            method="POST",
            json={
                "model": model,
                "input": convert_and_respect_annotation_metadata(
                    object_=input, annotation=typing.Sequence[Input], direction="write"
                ),
                "options": convert_and_respect_annotation_metadata(
                    object_=options, annotation=GenerationOptions, direction="write"
                ),
                "webhookUrl": webhook_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Generation,
                    parse_obj_as(
                        type_=Generation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_generation(
        self, id: GenerationId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Generation:
        """
        Parameters
        ----------
        id : GenerationId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Generation
            Job status retrieved successfully

        Examples
        --------
        import asyncio

        from sync import AsyncSync

        client = AsyncSync(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.generate.get_generation(
                id="6533643b-acbe-4c40-967e-d9ba9baac39e",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/generate/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Generation,
                    parse_obj_as(
                        type_=Generation,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_generations(
        self,
        *,
        status: typing.Optional[GenerationStatus] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Generation]:
        """
        Parameters
        ----------
        status : typing.Optional[GenerationStatus]
            Filter generations by status

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Generation]
            Generations retrieved successfully

        Examples
        --------
        import asyncio

        from sync import AsyncSync

        client = AsyncSync(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.generate.list_generations()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/generations",
            method="GET",
            params={
                "status": status,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Generation],
                    parse_obj_as(
                        type_=typing.List[Generation],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def estimate_cost(
        self,
        *,
        model: Model,
        input: typing.Sequence[Input],
        options: typing.Optional[GenerationOptions] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[EstimatedGenerationCost]:
        """
        Parameters
        ----------
        model : Model
            name of the model to use for generation.

        input : typing.Sequence[Input]
            Array of input objects. Must include one video input item and one audio input item. Audio input items can be provided as either: recorded/captured audio url or a text-to-speech input with tts provider configuration.

        options : typing.Optional[GenerationOptions]
            additional options available for generation.

        webhook_url : typing.Optional[str]
            webhook url for generation status updates. once the generation completes we will send a POST request to the webhook url with the generation data.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EstimatedGenerationCost]
            Generations retrieved successfully

        Examples
        --------
        import asyncio

        from sync import AsyncSync
        from sync.common import Audio, GenerationOptions, Video

        client = AsyncSync(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.generate.estimate_cost(
                input=[
                    Video(
                        url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortvid-03a10044-7741-4cfc-816a-5bccd392d1ee.mp4",
                    ),
                    Audio(
                        url="https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortaud-27623a4f-edab-4c6a-8383-871b18961a4a.wav",
                    ),
                ],
                model="lipsync-2",
                options=GenerationOptions(
                    sync_mode="loop",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/analyze/cost",
            method="POST",
            json={
                "model": model,
                "input": convert_and_respect_annotation_metadata(
                    object_=input, annotation=typing.Sequence[Input], direction="write"
                ),
                "options": convert_and_respect_annotation_metadata(
                    object_=options, annotation=GenerationOptions, direction="write"
                ),
                "webhookUrl": webhook_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[EstimatedGenerationCost],
                    parse_obj_as(
                        type_=typing.List[EstimatedGenerationCost],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        GenerationError,
                        parse_obj_as(
                            type_=GenerationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
